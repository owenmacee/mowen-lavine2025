```{r}
library(dplyr)
library(Seurat)
library(patchwork)
library(sctransform)
library(ggplot2)
library(harmony)
library(ggsci)
library(ggpubr)
library(pheatmap)
library(Matrix)
library(RColorBrewer)
library(scales)
library(SeuratDisk)
library(Nebulosa)
library(SeuratObject)
library(tidyverse)
library(enrichplot)
library(enrichR)
```

```{r}
#input data
IRF8_data <- Read10X(data.dir = "IRF8 matrices")
IRF8 <- CreateSeuratObject(counts = IRF8_data, min.cells = 3, min.features = 200)
IRF8$sample <- "IRF8"

WT_data <- Read10X(data.dir = "WT matrices")
WT <- CreateSeuratObject(counts = WT_data, min.cells = 3, min.features = 200)
WT$sample <- "WT"
```

```{r}
#Merge objects
MO2 <- merge(x=IRF8, y = c(WT))
```

```{r}
#QC
preQC[["percent.mt"]] <- PercentageFeatureSet(preQC, pattern = "^mt-")
VlnPlot(preQC, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, pt.size=0, group.by = "sample")
ncol(preQC)
MO2_postQC <- subset(preQC, subset = nFeature_RNA > 500 & nFeature_RNA < 7000 & percent.mt < 10 & nCount_RNA < 30000)
ncol(MO2_postQC)
VlnPlot(MO2_postQC, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, pt.size=0, group.by = "sample")
```

```{r}
#normalization and clustering
DefaultAssay(MO2_postQC) <- 'RNA'
MO2_postQC <- SCTransform(MO2_postQC, vars.to.regress = c("percent.mt", "nCount_RNA"), verbose = TRUE)
MO2_postQC <- RunPCA(MO2_postQC, features = VariableFeatures(object = MO2_postQC), npcs=100, verbose=TRUE)
DefaultAssay(MO1_postQC) <- "SCT"
MO2_postQC <- FindNeighbors(MO2_postQC, dims = 1:40, verbose = FALSE, 
                            reduction = "pca")
MO2_postQC <- FindClusters(MO2_postQC, resolution = 
                             c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8), 
                           verbose = FALSE)
MO2_postQC <- RunUMAP(MO2_postQC, dims = 1:40, verbose = FALSE, reduction = "pca")
```

```{r}
#visualize UMAP
DimPlot(MO2_postQC, group.by="SCT_snn_res.0.2")
```

```{r}
Idents(MO2_postQC) <- "SCT_snn_res.0.2"
MO2_postQC.rnamarkers <- FindAllMarkers(MO2_postQC, 
                                        only.pos = TRUE, 
                                        min.pct = 0.1, logfc.threshold = 0.25)
write.csv(MO2_postQC.rnamarkers, file ="MO2_res0.2.csv", quote = FALSE)
```

```{r}
#annotate clusters
fun <- function(x) {
        if (x == "0") {"CCL8 mac"}
        else if (x == "1") {"T cell"}
        else if (x == "2") {"Monocyte"}
        else if (x == "3") {"B cell"}
        else if (x == "4") {"DC3"}
        else if (x == "5") {"Resident mac"}
        else if (x == "6") {"cDC2"}
        else if (x == "7") {"NK cell"}
        else if (x == "8") {"Proliferating myeloid"}
        else if (x == "9") {"cDC1"}
        else if (x == "10") {"pDC"}
}

MO2_postQC$annotations <- mapply(fun, MO2_postQC$SCT_snn_res.0.2)
```

```{r}
#Visualize annotated clusters in UMAP
DimPlot(MO2_postQC, group.by="annotations", cols=c('B cell'='#a6cee3','CCL8 mac'='#1f78b4','DC3'='#b2df8a','cDC1'='#33a02c','cDC2'='#fb9a99','Monocyte'='#fdbf6f','NK cell'='#ff7f00','pDC'='#cab2d6','Proliferating myeloid'='#6a3d9a','Resident mac'='#ffff99','T cell'='#e31a1c'))
```


```{r}
#composition plot
ggplot(MO2_postQC@meta.data, aes(x=sample, fill=annotations)) + geom_bar(position = "fill") + theme_linedraw() + theme(axis.text.x = element_text(angle = 90)) + scale_fill_manual(values = c('B cell'='#a6cee3','CCL8 mac'='#1f78b4','DC3'='#b2df8a','cDC1'='#33a02c','cDC2'='#fb9a99','Monocyte'='#fdbf6f','NK cell'='#ff7f00','pDC'='#cab2d6','Proliferating myeloid'='#6a3d9a','Resident mac'='#ffff99','T cell'='#e31a1c')) + theme(axis.line = element_line(colour = "black"),    panel.grid.major = element_blank(),    panel.grid.minor = element_blank(),    panel.background = element_blank())
```

```{r}
#subset T cells
Idents(MO2_postQC) <- "annotations"
MO2_Tcell <- subset(MO2_postQC, idents="T cell")

MO2_Tcell <- FindNeighbors(MO2_Tcell, dims = 1:40, verbose = FALSE, 
                              reduction = "pca")
MO2_Tcell <- FindClusters(MO2_Tcell, resolution = 
                               c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8), 
                             verbose = FALSE)
MO2_Tcell <- RunUMAP(MO2_Tcell, dims = 1:40, verbose = FALSE, reduction = "pca")

DimPlot(MO2_Tcell, group.by = "SCT_snn_res.0.6", split.by = "sample")
```

```{r}
#find T cell markers
Idents(MO2_Tcell) <- "SCT_snn_res.0.6"
MO2_Tcell.rnamarkers <- FindAllMarkers(MO2_Tcell, 
                                          only.pos = TRUE, 
                                          min.pct = 0.1, logfc.threshold = 0.25)
write.csv(MO2_Tcell.rnamarkers, file ="MO2_Tcell0.6.csv", quote = FALSE)
```

```{r}
#T cell umap
DimPlot(MO2_Tcell, group.by = "SCT_snn_res.0.6")
```

```{r}
#T cell state annotations
fun <- function(x) {
  if (x =="0") {"CD4 effector"}
  else if (x == "1") {"Treg"}
  else if (x == "2") {"CD4: Rora"}
  else if (x == "3") {"CD8 effector: Ifng"}
  else if (x == "4") {"CD8: Tcf7, Cd160, Xcl1"}
  else if (x == "5") {"Proliferating"}
}

MO2_Tcell$annotations <- mapply(fun, MO2_Tcell$SCT_snn_res.0.6)
```


```{r}
#composition plot T cell
ggplot(MO2T@meta.data, aes(x=sample, fill=annotations)) + geom_bar(position = "fill") + theme_linedraw() + theme(axis.text.x = element_text(angle = 90)) + theme(axis.line = element_line(colour = "black"),    panel.grid.major = element_blank(),    panel.grid.minor = element_blank(),    panel.background = element_blank())
```

```{r}
#Z-score plotted onto T cell umap- repeated for all annotated cell states
Idents(MO2_Tcell) <- "annotations"
DefaultAssay(MO2_Tcell) <- "SCT"
expdata <- GetAssayData(MO2_Tcell)
zproliferating <- c('Hmgb2','Stmn1','Top2a','Pclaf','Tubb5')
pops<-list(zproliferating)
#Z-Scores
z_scores<-NULL

for (i in 1:length(pops)) {
  genes <- pops[[i]]
  zz <- which(tolower(rownames(expdata)) %in% tolower(genes))
  av <- numeric(ncol(expdata))
  
  geneExp <- as.matrix(expdata[zz, ])
  geneExp <- t(scale(t(geneExp)))
  geneExp[is.nan(geneExp)] <- 0
  z_scores <- rbind(z_scores,(av + colSums(geneExp) / length(zz)))
}
MO2_Tcell@meta.data$zproliferating<-z_scores[1,]

FeaturePlot(MO2_Tcell, features = c('zproliferating'), pt.size = 2)  + coord_fixed() + scale_color_gradientn(colors=c("#0D0887FF", "#7E03A8FF", "#CC4678FF", "#F89441FF", "#F0F921FF"))
```

```{r}
#T cell dot plot of cell state gene expression
MO2Tgenes <- c('Aff3','Bach2','Ccl5','Nkg7','Xcl1','Nrgn','Top2a','Hmgb2','Il7r','Rora','Ctla4','Ikzf2')

DotPlot(MO2_Tcell, features=MO2Tgenes, group.by="annotations", col.min=0, col.max=1, cols = c("lightgrey", "red")) + theme(axis.text=element_text(size=3)) + theme(axis.text.y = element_text(size=13)) + theme(axis.text.x = element_text(angle = 90, size=13))
```


```{r}
#T cell pathway analysis 
#import EnrichR tables
# Combine the two pathway analysis tables
table1 <- head(WTpathway, 4)  # First table
table2 <- head(IRF8pathway, 4)  # Second table

# Add a source column to each table
table1$Source <- "WT"
table2$Source <- "IRF8"

# Combine the two tables
combined_data <- rbind(table1, table2)

#plot
ggplot(combined_data, 
       aes(x = Source, 
           y = Term, 
           colour = P.value, 
           size = genecount)) +  # Map size to Gene Ratio
  geom_point() + 
  scale_colour_gradient(low = "blue", high = "red") +
  scale_size_continuous(range = c(5, 15)) +  # Adjust dot size range
  theme_bw() +
  theme(axis.title.x = element_text(size = 14), 
        axis.title.y = element_text(size = 14),
        axis.text.y = element_text(size = 12),
        legend.title = element_text(size = 12)) +
  labs(x = "Condition (WT vs IRF8)", 
       y = "Pathways", 
       colour = "P-value", 
       size = "Gene Count")
```
